int low[maxn], num[maxn], joint[maxn], bridge, n, m;
vi g[maxn];

void graph_init()
{
	cin >> n >> m;
	while(m--)
	{
		int u, v; cin >> u >> v;
		g[u].pb(v); g[v].pb(u);
	}
}

namespace bridgeAndJoint
{
    int timeDfs = 0;
    void dfs(int u, int pre)
    {
        int child = 0;
        num[u] = low[u] = ++timeDfs;
        for (int v : g[u])
        {
            if (v == pre) continue;
            if (!num[v])
            {
                dfs(v, u);
                low[u] = min(low[u], low[v]);
                if (low[v] == num[v]) bridge++;
                child++;
                if (u == pre)
                {
                    if (child > 1) joint[u] = true;
                }
                else if (low[v] >= num[u]) joint[u] = true;
            }
            else low[u] = min(low[u], num[v]);
        }
    }
    void init()
    {
    	fore(i, 1, n) if (!num[i]) dfs(i, i);
    }
};
