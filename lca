namespace lca
{
    void dfs(int u, int pre)
    {
        for (auto v : g[u])
        {
            if (pre == v) continue;
            dep[v] = dep[u] + 1;
            up[v][0] = u;
            for (int j = 1; j <= LOG; j++) up[v][j] = up[up[v][j - 1]][j - 1];
            dfs(v, u);
        }
    }

    int get(int u, int v)
    {
        if (dep[u] < dep[v]) swap(u, v);
        int k = dep[u] - dep[v];
        for (int j = LOG; j >= 0; j--)
            if ((k >> j) & 1) u = up[u][j];
        if (u == v) return u;
        for (int j = LOG; j >= 0; j--)
            if (up[u][j] != up[v][j])
            {
                u = up[u][j];
                v = up[v][j];
            }
        return up[u][0];
    }

    int root;
    void init()
    {
        dfs(root, root);
    }
}
