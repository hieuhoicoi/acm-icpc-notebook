struct segTree
{
    int n;
    vector<int> st, lazy;
    void segTree(int sz)
    {
        n = sz;
        st.resize(4 * n + 6);
        lazy.resize(4 * n + 6);
    }
#define idl (id << 1)
#define idr (id << 1 | 1)
    void down(int id)
    {
        lazy[idl] += lazy[id];
        lazy[idr] += lazy[id];
        st[idl] += lazy[id];
        st[idr] += lazy[id];
        lazy[id] = 0;
    }
    void update(int id, int l, int r, int ql, int qr, int val)
    {
        if (l > qr || r < ql)
            return;
        if (l >= ql && r <= qr)
        {
            lazy[id] += val;
            st[id] += val;
            return;
        }
        int m = (l + r) >> 1;
        down(id);
        update(idl, l, m, ql, qr, val);
        update(idr, m + 1, r, ql, qr, val);
        st[id] = max(st[idl], st[idr]);
    }
    int get(int id, int l, int r, int ql, int qr)
    {
        if (l > qr || r < ql)
            return 0;
        if (l >= ql && r <= qr)
            return st[id];
        int m = (l + r) >> 1;
        down(id);
        return max(get(idl, l, m, ql, qr), get(idr, m + 1, r, ql, qr));
    }
};
